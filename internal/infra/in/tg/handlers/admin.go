package handlers

import (
	"context"
	"errors"
	"fmt"
	"strings"
	"support_bot/internal/infra/in/tg/menu"
	"support_bot/internal/models"
	"support_bot/internal/service"

	tele "gopkg.in/telebot.v4"
)

type AdminHandler struct {
	bot         *tele.Bot
	userService *service.User
	chatService *service.Chat
	chatNotify  *service.ChatNotify
	userNotify  *service.UserNotify
	stats       *service.Stats
	state       *State
}

func NewAdminHandler(
	bot *tele.Bot,
	userService *service.User,
	chatService *service.Chat,
	notificationService *service.ChatNotify,
	userNotify *service.UserNotify,
	stats *service.Stats,
	state *State,
) *AdminHandler {
	return &AdminHandler{
		bot:         bot,
		userService: userService,
		chatService: chatService,
		state:       state,
		chatNotify:  notificationService,
		userNotify:  userNotify,
		stats:       stats,
	}
}

// StartAdmin handles the start command for admins.
func (h *AdminHandler) StartAdmin(c tele.Context) error {
	if c.Chat().Type != tele.ChatPrivate {
		return nil
	}

	menu.AdminMenu.Reply(
		menu.AdminMenu.Row(menu.ManageUsers, menu.ManageChats),
		menu.AdminMenu.Row(menu.SendNotifyAdmin, menu.RestartCron),
	)
	h.state.Set(c.Sender().ID, MenuState)
	//nolint:errcheck
	c.Delete()

	return c.Send(HelloAdminRegistration, menu.AdminMenu)
}

func (h *AdminHandler) SendNotification(c tele.Context) error {
	h.state.Set(c.Sender().ID, SendNotificationState)

	//nolint:errcheck
	c.Delete()

	return c.Send(PleaseSendMessage)
}

func (h *AdminHandler) ProcessSendNotification(c tele.Context) error {
	if h.state.Get(c.Sender().ID) != SendNotificationState {
		return c.Edit(SendTimeExpired)
	}

	msg := c.Text()
	if msg == "" {
		return c.Send(PleaseSendMessage)
	}

	h.state.SetMsgData(c.Sender().ID, msg)
	// –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "Confirm" –∏ "Cancel"
	confirmBtn := menu.Selector.Data(
		"‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å",
		"confirm_notification",
	)
	cancelBtn := menu.Selector.Data(
		"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
		"cancel_notification",
	)

	menu.Selector.Inline(
		menu.Selector.Row(cancelBtn, confirmBtn),
	)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
	h.state.Set(c.Sender().ID, ConfirmNotificationState)

	conf := "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ?\n\n"
	formated := fmt.Sprintf("%s```\n%s```", conf, msg)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	return c.Send(
		formated,
		menu.Selector,
		tele.ModeMarkdownV2,
	)
}

func (h *AdminHandler) ConfirmSendNotification(c tele.Context) error {
	ctx := context.Background()

	msg, ok := h.state.GetMsgData(c.Sender().ID)
	if h.state.Get(c.Sender().ID) != ConfirmNotificationState || !ok {
		return c.Edit(SendTimeExpired)
	}

	resp, err := h.chatNotify.Broadcast(ctx, msg)
	if err != nil {
		if errors.Is(err, models.ErrNotFound) {
			return c.Edit(UnableCauseNotFound)
		}

		if errors.Is(err, models.ErrInternal) {
			return c.Edit(UnableCauseInternal)
		}

		return c.Edit(UnableSendMessages + err.Error())
	}

	userString := fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s —Ä–∞–∑–æ—Å–ª–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:", c.Sender().Username)
	formString := fmt.Sprintf(
		"%s\n```\n%s```",
		userString, msg,
	)
	//nolint:errcheck
	h.userNotify.SendAdminNotify(ctx, h.bot, formString)
	h.state.Set(c.Sender().ID, MenuState)

	return c.Edit(resp, tele.ModeMarkdownV2)
}

func (h *AdminHandler) CancelSendNotification(c tele.Context) error {
	h.state.Set(c.Sender().ID, MenuState)

	return c.Edit(SendNotifyAborted)
}

// ManageUsers handles the user management menu.
func (h *AdminHandler) ManageUsers(c tele.Context) error {
	menu.AdminMenu.Reply(
		menu.AdminMenu.Row(menu.AddUser, menu.RemoveUser),
		menu.AdminMenu.Row(menu.ListUser, menu.Back))
	h.state.Set(c.Sender().ID, MenuState)
	//nolint:errcheck
	c.Delete()

	return c.Send(ManageUsers, menu.AdminMenu)
}

func (h *AdminHandler) ProcessAdminInput(c tele.Context) error {
	userID := c.Sender().ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —é–∑–µ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
	if h.state.Get(userID) == MenuState {
		return nil
	}

	state := h.state.Get(userID)

	switch state {
	case AddUserState:
		return h.ProcessAddUser(c) // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	case RemoveUserState:
		return h.ProcessRemoveUser(c)
	case AddChatState:
		return h.ProcessAddChat(c)
	case RemoveChatState:
		return h.ProcessRemoveChat(c)
	case SendNotificationState:
		return h.ProcessSendNotification(c)
	default:
		return nil // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
	}
}

func (h *AdminHandler) AddUser(c tele.Context) error {
	h.state.Set(c.Sender().ID, AddUserState)
	//nolint:errcheck
	c.Delete()

	return c.Send(
		UserAddRemove,
	)
}

// ProcessAddUser processes the username input for adding a user.
func (h *AdminHandler) ProcessAddUser(c tele.Context) error {
	userID := c.Sender().ID
	if h.state.Get(userID) != AddUserState {
		return nil
	}
	//nolint: errcheck
	c.Delete()

	username := c.Text()
	if !strings.HasPrefix(username, "@") {
		return c.Send(PleaseSendCorrectUsername)
	}

	username = username[1:]
	confirmBtn := menu.Selector.Data(
		"Admin",
		"add_admin",
		username,
	)
	cancelBtn := menu.Selector.Data("User", "add_user", username)

	menu.Selector.Inline(
		menu.Selector.Row(cancelBtn, confirmBtn),
	)
	//nolint: errcheck
	c.Delete()

	return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @"+username+".", menu.Selector)
}

func (h *AdminHandler) AddUserWithUserRole(c tele.Context) error {
	ctx := context.Background()

	userID := c.Sender().ID
	if h.state.Get(userID) != AddUserState {
		return nil
	}

	username := c.Data()

	if err := h.userService.CreateEmpty(ctx, username, false); err != nil {
		return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + err.Error())
	}

	h.state.Set(userID, MenuState) // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

	return c.Edit("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @" + username + " –¥–æ–±–∞–≤–ª–µ–Ω.")
}

func (h *AdminHandler) AddUserWithAdminRole(c tele.Context) error {
	ctx := context.Background()

	userID := c.Sender().ID
	if h.state.Get(userID) != AddUserState {
		return nil
	}

	username := c.Data()

	if err := h.userService.CreateEmpty(ctx, username, true); err != nil {
		return c.Edit("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + err.Error())
	}

	h.state.Set(userID, MenuState) // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

	return c.Edit("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @" + username + " –¥–æ–±–∞–≤–ª–µ–Ω.")
}

// RemoveUser handles removing a user.
func (h *AdminHandler) RemoveUser(c tele.Context) error {
	h.state.Set(c.Sender().ID, RemoveUserState)
	//nolint:errcheck
	c.Delete()

	return c.Send(
		UserAddRemove,
	)
}

// ProcessRemoveUser processes the username input for removing a user.
func (h *AdminHandler) ProcessRemoveUser(c tele.Context) error {
	ctx := context.Background()
	isPrimeReq := false

	username := c.Text()
	if !strings.HasPrefix(username, "@") {
		return c.Send(PleaseSendCorrectUsername)
	}

	// Remove @ and extract the username
	username = username[1:]
	if username == c.Sender().Username {
		return c.Send(ErrDeleteUserCauseSuicide)
	}

	role, err := h.userService.IsAllowed(ctx, c.Sender().ID)
	if role == models.PrimaryAdminRole {
		isPrimeReq = true
	}

	if err != nil {
		return c.Send(ErrDeleteUser + err.Error())
	}

	// Call service to remove user
	err = h.userService.Delete(ctx, username, isPrimeReq)
	if err != nil {
		return c.Send(ErrDeleteUser + err.Error())
	}

	h.state.Set(c.Sender().ID, MenuState)

	return c.Send("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @" + username + " —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
}

// ListUsers handles listing all users.
func (h *AdminHandler) ListUsers(c tele.Context) error {
	ctx := context.Background()
	//nolint:errcheck
	c.Delete()

	users, err := h.userService.GetAll(ctx)
	if errors.Is(err, models.ErrNotFound) {
		return c.Send("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
	}

	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + err.Error())
	}

	var response strings.Builder

	response.WriteString("üìã *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n")

	for i, user := range users {
		response.WriteString(
			fmt.Sprintf("%d. @%s - Role: %s\n", i+1, user.Username, user.Role),
		)
	}

	return c.Send(response.String(), &tele.SendOptions{ParseMode: tele.ModeMarkdown})
}

// ManageChats handles the chat management menu.
func (h *AdminHandler) ManageChats(c tele.Context) error {
	menu.AdminMenu.Reply(
		menu.AdminMenu.Row(menu.RemoveChat),
		menu.AdminMenu.Row(menu.ListChats, menu.Back))
	//nolint:errcheck
	c.Delete()

	return c.Send("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏", menu.AdminMenu)
}

// ProcessAddChat processes the chat input for adding a chat.
func (h *AdminHandler) ProcessAddChat(c tele.Context) error {
	ctx := context.Background()

	if c.Chat().Type == tele.ChatPrivate {
		return c.Send("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö")
	}
	//nolint:errcheck
	// –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–µ –≤–∞–∂–Ω–æ —Å–º–æ–≥ –æ–Ω —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ—Ç
	c.Delete()

	err := h.chatService.Add(ctx, c.Chat())
	if err != nil {
		//nolint:errcheck
		h.userNotify.SendNotify(
			ctx,
			c.Sender().ID,
			fmt.Sprintf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞: %s : %v", c.Chat().Title, err.Error()),
		)

		return nil
	}

	//nolint:errcheck
	h.userNotify.Broadcast(
		ctx,
		"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —á–∞—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: "+c.Chat().Title,
	)

	return nil
}

// RemoveChat handles removing a chat.
func (h *AdminHandler) RemoveChat(c tele.Context) error {
	h.state.Set(c.Sender().ID, RemoveChatState)
	//nolint:errcheck
	c.Delete()

	return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ –∏–º—è —á–∞—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.")
}

// ProcessRemoveChat processes the chat input for removing a chat.
func (h *AdminHandler) ProcessRemoveChat(c tele.Context) error {
	ctx := context.Background()

	chatName := c.Text()

	err := h.chatService.Remove(ctx, chatName)
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞: " + err.Error())
	}

	h.state.Set(c.Sender().ID, MenuState)

	return c.Send("–ß–∞—Ç " + chatName + " —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
}

// ListChats handles listing all chats.
func (h *AdminHandler) ListChats(c tele.Context) error {
	ctx := context.Background()

	chats, err := h.chatService.GetAll(ctx)
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤: " + err.Error())
	}

	if len(chats) == 0 {
		return c.Send("–ß–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
	}

	var response strings.Builder

	response.WriteString("üìã *–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤:*\n\n")

	for i, chat := range chats {
		response.WriteString(
			fmt.Sprintf("%d. %s\n", i+1, chat.Title),
		)
	}
	//nolint:errcheck
	c.Delete()

	return c.Send(response.String(), &tele.SendOptions{ParseMode: tele.ModeMarkdown})
}

// ManageCron handles the chat management menu.
func (h *AdminHandler) ManageCron(c tele.Context) error {
	menu.AdminMenu.Reply(
		menu.AdminMenu.Row(menu.RestartCron),
		menu.AdminMenu.Row(menu.ListNotify, menu.Back))

	c.Delete()

	return c.Send("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏", menu.AdminMenu)
}

// RestartCronJobs –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –∫—Ä–æ–Ω-–∑–∞–¥–∞—á–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
func (h *AdminHandler) RestartCronJobs(c tele.Context) error {
	ctx := context.Background()

	err := h.stats.Start(ctx)
	if err != nil {
		return c.Send(fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∫—Ä–æ–Ω-–∑–∞–¥–∞—á: %v", err))
	}

	return c.Send("‚úÖ –ö—Ä–æ–Ω-–∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã")
}
