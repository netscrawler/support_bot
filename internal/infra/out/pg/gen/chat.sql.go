// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: chat.sql

package repogen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createChat = `-- name: CreateChat :one
INSERT INTO chats (
    chat_id, title, type, description, is_active
) VALUES ( $1,$2,$3,$4,$5 )
RETURNING id, chat_id, title, type, description, is_active
`

type CreateChatParams struct {
	ChatID      int64
	Title       pgtype.Text
	Type        string
	Description pgtype.Text
	IsActive    bool
}

func (q *Queries) CreateChat(ctx context.Context, arg CreateChatParams) (Chat, error) {
	row := q.db.QueryRow(ctx, createChat,
		arg.ChatID,
		arg.Title,
		arg.Type,
		arg.Description,
		arg.IsActive,
	)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.Title,
		&i.Type,
		&i.Description,
		&i.IsActive,
	)
	return i, err
}

const deleteChatByID = `-- name: DeleteChatByID :exec
DELETE FROM chats
    WHERE chat_id = $1
`

func (q *Queries) DeleteChatByID(ctx context.Context, chatID int64) error {
	_, err := q.db.Exec(ctx, deleteChatByID, chatID)
	return err
}

const getAllActiveChats = `-- name: GetAllActiveChats :many
SELECT id, chat_id, title, type, description, is_active FROM chats where is_active=true
`

func (q *Queries) GetAllActiveChats(ctx context.Context) ([]Chat, error) {
	rows, err := q.db.Query(ctx, getAllActiveChats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chat
	for rows.Next() {
		var i Chat
		if err := rows.Scan(
			&i.ID,
			&i.ChatID,
			&i.Title,
			&i.Type,
			&i.Description,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllChats = `-- name: GetAllChats :many
SELECT id, chat_id, title, type, description, is_active FROM chats
`

func (q *Queries) GetAllChats(ctx context.Context) ([]Chat, error) {
	rows, err := q.db.Query(ctx, getAllChats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chat
	for rows.Next() {
		var i Chat
		if err := rows.Scan(
			&i.ID,
			&i.ChatID,
			&i.Title,
			&i.Type,
			&i.Description,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChatByTitle = `-- name: GetChatByTitle :one
Select id, chat_id, title, type, description, is_active from chats
where title =$1
Limit 1
`

func (q *Queries) GetChatByTitle(ctx context.Context, title pgtype.Text) (Chat, error) {
	row := q.db.QueryRow(ctx, getChatByTitle, title)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.Title,
		&i.Type,
		&i.Description,
		&i.IsActive,
	)
	return i, err
}
