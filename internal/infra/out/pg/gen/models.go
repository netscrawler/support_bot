// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package repogen

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type UserRole string

const (
	UserRoleAdmin   UserRole = "admin"
	UserRoleUser    UserRole = "user"
	UserRolePrimary UserRole = "primary"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole
	Valid    bool // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type Chat struct {
	ID          int32
	ChatID      int64
	Title       pgtype.Text
	Type        string
	Description pgtype.Text
	IsActive    bool
}

type Notify struct {
	ID         int32
	Name       string
	Cron       string
	Active     bool
	Format     []string
	Title      string
	ThreadID   int64
	RemotePath pgtype.Text
	ChatID     pgtype.Int4
	GroupID    pgtype.Int4
	TemplateID pgtype.Int4
}

type NotifyGroup struct {
	ID    int32
	Name  string
	Title string
}

type NotifyQuery struct {
	NotifyID int32
	QueryID  int32
}

type Query struct {
	ID       int32
	CardUuid string
	Title    pgtype.Text
}

type Template struct {
	ID           int32
	TemplateText pgtype.Text
	Title        pgtype.Text
}

type User struct {
	ID         int32
	TelegramID int64
	Username   pgtype.Text
	FirstName  pgtype.Text
	LastName   pgtype.Text
	Role       UserRole
}
