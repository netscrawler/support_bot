// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: notify.sql

package repogen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const listAllActiveNotifies = `-- name: ListAllActiveNotifies :many
SELECT
    n.id,
    n.name,
    ng.name  AS group_id,
    nq.card_uuid,
    n.cron,
    tp.template_text,
    n.title,
    ng.title AS group_title,
    c.chat_id,
    n.active,
    n.format,
	n.thread_id

FROM notify n
LEFT JOIN chats c ON n.chat_id = c.id
LEFT JOIN notify_groups ng ON n.group_id = ng.id
LEFT JOIN queries nq ON nq.id = n.query_id
LEFT JOIN templates tp ON tp.id = n.template_id
WHERE n.active = TRUE
ORDER BY n.id
`

type ListAllActiveNotifiesRow struct {
	ID           int32
	Name         string
	GroupID      pgtype.Text
	CardUuid     pgtype.Text
	Cron         string
	TemplateText pgtype.Text
	Title        string
	GroupTitle   pgtype.Text
	ChatID       pgtype.Int8
	Active       bool
	Format       []string
	ThreadID     int64
}

func (q *Queries) ListAllActiveNotifies(ctx context.Context) ([]ListAllActiveNotifiesRow, error) {
	rows, err := q.db.Query(ctx, listAllActiveNotifies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAllActiveNotifiesRow
	for rows.Next() {
		var i ListAllActiveNotifiesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.GroupID,
			&i.CardUuid,
			&i.Cron,
			&i.TemplateText,
			&i.Title,
			&i.GroupTitle,
			&i.ChatID,
			&i.Active,
			&i.Format,
			&i.ThreadID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllNotifies = `-- name: ListAllNotifies :many
SELECT
    n.id,
    n.name,
    ng.name  AS group_id,
    nq.card_uuid,
    n.cron,
    tp.template_text,
    n.title,
    ng.title AS group_title,
    c.chat_id,
    n.active,
    n.format,
    n.thread_id
FROM notify n
LEFT JOIN chats c ON n.chat_id = c.id
LEFT JOIN notify_groups ng ON n.group_id = ng.id
LEFT JOIN queries nq ON nq.id = n.query_id
LEFT JOIN templates tp ON tp.id = n.template_id
ORDER BY n.id
`

type ListAllNotifiesRow struct {
	ID           int32
	Name         string
	GroupID      pgtype.Text
	CardUuid     pgtype.Text
	Cron         string
	TemplateText pgtype.Text
	Title        string
	GroupTitle   pgtype.Text
	ChatID       pgtype.Int8
	Active       bool
	Format       []string
	ThreadID     int64
}

func (q *Queries) ListAllNotifies(ctx context.Context) ([]ListAllNotifiesRow, error) {
	rows, err := q.db.Query(ctx, listAllNotifies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAllNotifiesRow
	for rows.Next() {
		var i ListAllNotifiesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.GroupID,
			&i.CardUuid,
			&i.Cron,
			&i.TemplateText,
			&i.Title,
			&i.GroupTitle,
			&i.ChatID,
			&i.Active,
			&i.Format,
			&i.ThreadID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
